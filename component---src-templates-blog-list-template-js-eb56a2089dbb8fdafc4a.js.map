{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/templates/blog-list-template.js"],"names":["socialLinksPrefix","Twitter","LinkedIn","Bio","data","site","siteMetadata","author","social","style","background","color","padding","rhythm","borderRadius","marginBottom","display","fixed","avatar","childImageSharp","alt","name","marginRight","minWidth","imgStyle","border","summary","textAlign","height","Object","keys","map","key","href","className","target","rel","toLowerCase","BlogList","location","pageContext","numPages","currentPage","siteTitle","title","posts","allMarkdownRemark","edges","node","frontmatter","fields","slug","marginTop","fontSize","boxShadow","textDecoration","to","justifyContent","paddingBottom","date","timeToRead","dangerouslySetInnerHTML","__html","excerpt","pageQuery"],"mappings":"sNAYMA,EAAoB,CACxBC,QAAS,uBACTC,SAAU,4BAmFGC,IAhFH,WACV,IAAMC,EAAI,OADM,EA0BWA,EAAKC,KAAKC,aAA7BC,EA1BQ,EA0BRA,OAAQC,EA1BA,EA0BAA,OAChB,OACE,+BACEC,MAAO,CACLC,WAAW,UACXC,MAAM,UACNC,QAASC,YAAO,GAChBC,aAAcD,YAAO,IACrBE,aAAcF,YAAO,KAGvB,+BACEJ,MAAO,CACLO,QAAQ,SAGV,wBAAC,IAAD,CACEC,MAAOb,EAAKc,OAAOC,gBAAgBF,MACnCG,IAAKb,EAAOc,KACZZ,MAAO,CACLa,YAAaT,YAAO,IACpBE,aAAc,EACdQ,SAAU,GACVT,aAAa,QAEfU,SAAU,CACRV,aAAa,MACbW,OAAO,uBAGX,mCACE,iDACa,sCAASlB,EAAOc,OAE7B,mCAAMd,EAAOmB,SACb,+BAAKjB,MAAO,CAAEkB,UAAU,QAAUC,OAAQf,YAAO,KAC9CgB,OAAOC,KAAKtB,GAAQuB,KAAI,SAAAC,GAAG,OAC1B,6BACEA,IAAKA,EACLC,KAAI,GAAKjC,EAAkBgC,GAAOxB,EAAOwB,GACzCE,UAAU,cACVC,OAAO,SACPC,IAAI,uBAEJ,6BAAGF,UAAS,WAAaF,EAAIK,0B,ioECvF7C,6HAsGeC,UA9FE,SAAC,GAIX,IAHLlC,EAGI,EAHJA,KACAmC,EAEI,EAFJA,SAEI,IADJC,YAAeC,EACX,EADWA,SAAUC,EACrB,EADqBA,YAEnBC,EAAYvC,EAAKC,KAAKC,aAAasC,MACnCC,EAAQzC,EAAK0C,kBAAkBC,MAErC,OACE,wBAAC,IAAD,CAAQR,SAAUA,EAAUK,MAAOD,GACjC,wBAAC,IAAD,CAAKC,MAAM,cACX,wBAAC,IAAD,MACA,8BACEnC,MAAO,CACLM,aAAcF,YAAO,MAGxBgC,EAAMd,KAAI,YAAe,IAAZiB,EAAW,EAAXA,KACNJ,EAAQI,EAAKC,YAAYL,OAASI,EAAKE,OAAOC,KACpD,OACE,mCAASnB,IAAKgB,EAAKE,OAAOC,MACxB,sCACE,8BACE1C,MAAO,CACL2C,UAAWvC,YAAO,GAClBE,aAAcF,YAAO,EAAI,GACzBwC,SAAUxC,YAAO,KAGnB,wBAAC,OAAD,CACEJ,MAAO,CAAE6C,UAAU,OAASC,eAAe,QAC3CC,GAAIR,EAAKE,OAAOC,MAEfP,IAGL,+BACEnC,MAAO,CACLO,QAAQ,OACRyC,eAAe,gBACfC,cAAe7C,YAAO,KAGxB,iDAAiBmC,EAAKC,YAAYU,MAClC,sDACiBX,EAAKY,WAAY,IACX,IAApBZ,EAAKY,WAAmB,SAAW,aAI1C,uCACE,6BACEC,wBAAyB,CACvBC,OAAQd,EAAKe,WAGjB,wBAAC,OAAD,CACEtD,MAAO,CACL6C,UAAU,OACVC,eAAe,OACfvC,QAAQ,QACRW,UAAU,SAEZ6B,GAAIR,EAAKE,OAAOC,MAPlB,qBAgBR,mCACE,kCACE,kCACGT,EAAc,GACb,wBAAC,OAAD,CAAMc,GAAE,KAAMd,EAAc,GAAKN,IAAI,QAArC,kBAKJ,kCACGM,EAAcD,GACb,wBAAC,OAAD,CAAMe,GAAE,KAAMd,EAAc,GAAKN,IAAI,QAArC,sBAaP,IAAM4B,EAAS","file":"component---src-templates-blog-list-template-js-eb56a2089dbb8fdafc4a.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport Image from \"gatsby-image\"\nimport React from \"react\"\n\nimport { rhythm } from \"../utils/typography\"\n\nconst socialLinksPrefix = {\n  Twitter: \"https://twitter.com/\",\n  LinkedIn: \"https://linkedin.com/in/\",\n};\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.png/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          description\n          author {\n            name\n            summary\n          }\n          social {\n            Twitter\n            LinkedIn\n          }\n        }\n      }\n    }\n  `);\n\n  const { author, social } = data.site.siteMetadata;\n  return (\n    <div\n      style={{\n        background: `#222222`,\n        color: `#ffffff`,\n        padding: rhythm(1),\n        borderRadius: rhythm(1 / 2),\n        marginBottom: rhythm(1),\n      }}\n    >\n      <div\n        style={{\n          display: `flex`,\n        }}\n      >\n        <Image\n          fixed={data.avatar.childImageSharp.fixed}\n          alt={author.name}\n          style={{\n            marginRight: rhythm(1 / 2),\n            marginBottom: 0,\n            minWidth: 50,\n            borderRadius: `100%`,\n          }}\n          imgStyle={{\n            borderRadius: `50%`,\n            border: `1px solid #111111`,\n          }}\n        />\n        <div>\n          <div>\n            Written by <strong>{author.name}</strong>\n          </div>\n          <div>{author.summary}</div>\n          <div style={{ textAlign: `right`, height: rhythm(1) }}>\n            {Object.keys(social).map(key => (\n              <a\n                key={key}\n                href={`${socialLinksPrefix[key]}${social[key]}`}\n                className=\"social-link\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <i className={`socicon-${key.toLowerCase()}`} />\n              </a>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Bio;\n","import { graphql, Link } from \"gatsby\"\nimport React from \"react\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\n\nconst BlogList = ({\n  data,\n  location,\n  pageContext: { numPages, currentPage },\n}) => {\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.edges;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <Bio />\n      <hr\n        style={{\n          marginBottom: rhythm(1),\n        }}\n      />\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug;\n        return (\n          <article key={node.fields.slug}>\n            <header>\n              <h2\n                style={{\n                  marginTop: rhythm(1),\n                  marginBottom: rhythm(1 / 4),\n                  fontSize: rhythm(1),\n                }}\n              >\n                <Link\n                  style={{ boxShadow: `none`, textDecoration: `none` }}\n                  to={node.fields.slug}\n                >\n                  {title}\n                </Link>\n              </h2>\n              <div\n                style={{\n                  display: `flex`,\n                  justifyContent: `space-between`,\n                  paddingBottom: rhythm(1),\n                }}\n              >\n                <small>Written: {node.frontmatter.date}</small>\n                <small>\n                  Reading Time: {node.timeToRead}{\" \"}\n                  {node.timeToRead === 1 ? \"minute\" : \"minutes\"}\n                </small>\n              </div>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.excerpt,\n                }}\n              />\n              <Link\n                style={{\n                  boxShadow: `none`,\n                  textDecoration: `none`,\n                  display: `block`,\n                  textAlign: `right`,\n                }}\n                to={node.fields.slug}\n              >\n                Read more...\n              </Link>\n            </section>\n          </article>\n        );\n      })}\n\n      <nav>\n        <ul>\n          <li>\n            {currentPage > 1 && (\n              <Link to={`/${currentPage - 1}`} rel=\"next\">\n                ← Newer Posts\n              </Link>\n            )}\n          </li>\n          <li>\n            {currentPage < numPages && (\n              <Link to={`/${currentPage + 1}`} rel=\"prev\">\n                Older Posts →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  );\n};\n\nexport default BlogList;\n\nexport const pageQuery = graphql`\n  query blogListQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 250, format: HTML)\n          timeToRead\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}